{"version":3,"sources":["components/Store/Item/Item.js","components/Store/Store.js","components/Cart/Item/Item.js","components/Cart/Cart.js","App.js","index.js"],"names":["Item","item","addToCart","useState","quantity","setQuantity","isStocked","Boolean","name","type","min","max","value","onChange","event","parseInt","target","disabled","onClick","className","Store","stock","map","key","id","updateCart","useEffect","Cart","cart","App","setStock","setCart","selectedItem","newStock","newCart","indexInStock","findIndex","indexInCart","push","diff","splice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.256aa458.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst Item = ({ item, addToCart }) => {\n\tconst [quantity, setQuantity] = useState(0);\n\n\tconst addToCartHandler = () => {\n        const localItem = {...item};\n        localItem.quantity += quantity\n\t\taddToCart(item, quantity);\n\t\tsetQuantity(0);\n\t};\n\n\tconst inputHandler = (event) => {\n\t\tconst value = parseInt(event.target.value);\n\n\t\tsetQuantity(value);\n\t};\n    const isStocked = Boolean(item.quantity);\n    \n\treturn (\n\t\t<li>\n\t\t\t<span>{item.name}</span>\n\t\t\t<input\n\t\t\t\ttype=\"number\"\n\t\t\t\tmin={0}\n\t\t\t\tmax={item.quantity}\n\t\t\t\tvalue={quantity}\n\t\t\t\tonChange={inputHandler}\n\t\t\t\tdisabled={!isStocked}\n\t\t\t/>\n\t\t\t<button onClick={addToCartHandler} disabled={!isStocked}>\n\t\t\t\tAdd to Cart\n\t\t\t</button>\n\t\t\t{!isStocked && <span className=\"label\">Out of Stock</span>}\n\t\t</li>\n\t);\n};\n\nexport default Item;\n","import React from \"react\";\nimport Item from \"./Item/Item\";\n\nconst Store = ({ stock, addToCart }) => {\n\treturn (\n\t\t<div className=\"stock\">\n\t\t\t<h3>Store</h3>\n\t\t\t<ul className=\"stockList\">\n\t\t\t\t{stock.map((item) => (\n\t\t\t\t\t<Item key={item.id} item={item} addToCart={addToCart} />\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default Store;\n","import React, { useState, useEffect } from \"react\";\n\nconst Item = ({ item, updateCart }) => {\n    const [quantity, setQuantity] = useState(item.quantity);\n    \n    useEffect(() => {\n        setQuantity(item.quantity)\n    }, [item.quantity])\n\n\tconst updateHandler = () => updateCart(item, quantity);\n\tconst deleteHandler = () => updateCart(item, 0);\n\n\tconst inputHandler = (event) => {\n\t\tconst value = parseInt(event.target.value);\n\n\t\tsetQuantity(value);\n\t};\n\n\treturn item.quantity ? (\n\t\t<li>\n\t\t\t<span>{item.name}</span>\n\t\t\t<input\n\t\t\t\ttype=\"number\"\n\t\t\t\tmin={0}\n\t\t\t\tmax={item.quantity}\n\t\t\t\tvalue={quantity}\n\t\t\t\tonChange={inputHandler}\n\t\t\t/>\n\t\t\t<button className={'update'} onClick={updateHandler}>update</button>\n\t\t\t<button className={'delete'} onClick={deleteHandler}>delete</button>\n\t\t</li>\n\t) : (\n\t\t\"\"\n\t);\n};\n\nexport default Item;\n","import React from \"react\";\nimport Item from \"./Item/Item\";\n\nconst Cart = ({ cart, updateCart }) => {\n\treturn (\n\t\t<div className=\"cart\">\n\t\t\t<h3>Cart</h3>\n\t\t\t<ul className=\"cartList\">\n\t\t\t\t{cart.map((item) => (\n\t\t\t\t\t<Item key={item.id} item={item} updateCart={updateCart}/>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default Cart;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Store from \"./components/Store/Store\";\nimport Cart from \"./components/Cart/Cart\";\n\n/**\n * Exercise\n *\n * 1. Create a cart with list of Items\n * 2. As a user I can select available quantity(use input[number])\n * 3. After I selected quantity by clicking \"Add To Cart\" I can add item to cart\n * and stock should be decreased.\n * 4. When item stock is 0, disable \"Add To Cart\" button and show \"Out of stock\" message\n * 5. In cart section I want to see all products in cart with selected quantity\n * 6. Each product in cart should have input(number) to modify cart quantity.\n * 7. If I change quantity value in cart section for a product and\n * click \"update\" button, quantity in cart should be decremented and restock\n * in store.(increment stock value). If the new value is 0, item should be removed\n * from cart.\n * 8. Add \"delete\" button to each item in cart. When I click \"delete\" button,\n * it should remove item from cart and restock it store.\n * \n * Components tree:\n * App\n * - Cart\n * -- cart item\n * - Store\n * -- store item\n */\n\nconst App = () => {\n\t// YOUR STORE:\n\tconst [stock, setStock] = useState([\n\t\t{\n\t\t\tid: 1,\n\t\t\tname: \"butter\",\n\t\t\tquantity: 20,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tname: \"Apples\",\n\t\t\tquantity: 5,\n\t\t},\n\t\t{\n\t\t\tid: 3,\n\t\t\tname: \"Salmon\",\n\t\t\tquantity: 13,\n\t\t},\n\t\t{\n\t\t\tid: 4,\n\t\t\tname: \"Soap\",\n\t\t\tquantity: 2,\n\t\t},\n\t]);\n\t// ====================\n\tconst [cart, setCart] = useState([]);\n\n\tconst updateCart = (selectedItem, quantity) => {\n\t\tconst newStock = [...stock];\n\t\tconst newCart = [...cart];\n\n\t\tconst indexInStock = stock.findIndex((item) => item.id === selectedItem.id);\n\t\tconst indexInCart = cart.findIndex((item) => item.id === selectedItem.id);\n\n\t\tconst diff = newCart[indexInCart].quantity - quantity;\n\n\t\tnewStock[indexInStock].quantity += diff;\n\n\t\tif (quantity < 1) {\n\t\t\tnewCart.splice(indexInCart, 1);\n\t\t} else {\n\t\t\tnewCart[indexInCart].quantity = quantity;\n\t\t}\n\n\t\tsetCart(newCart);\n\t\tsetStock(newStock);\n\t};\n\n\tconst addToCartHandler = (selectedItem, quantity) => {\n\t\tconst newStock = [...stock];\n\t\tconst newCart = [...cart];\n\n\t\tconst indexInStock = stock.findIndex((item) => item.id === selectedItem.id);\n\t\tconst indexInCart = cart.findIndex((item) => item.id === selectedItem.id);\n\n\t\tnewStock[indexInStock].quantity -= quantity;\n\n\t\tif (indexInCart >= 0) {\n\t\t\tnewCart[indexInCart].quantity += quantity;\n\t\t} else {\n\t\t\tnewCart.push({\n\t\t\t\t...selectedItem,\n\t\t\t\tquantity,\n\t\t\t});\n\t\t}\n\n\t\tsetCart(newCart);\n\t\tsetStock(newStock);\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Store stock={stock} addToCart={addToCartHandler} />\n\t\t\t<Cart cart={cart} updateCart={updateCart} />\n\t\t</div>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}